/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RequestPrintShop;

import RequestPrintDatabase.ConnectionBuilder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;

/**
 *
 * @author Lenovo
 */
public class ChangeStatus extends javax.swing.JFrame {

    private String status;

    /**
     * Creates new form ChangeStatus
     */
    public ChangeStatus() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changeGroup = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        changeStatusTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        waitForReceipt = new javax.swing.JRadioButton();
        pendingPayment = new javax.swing.JRadioButton();
        pendingResponding = new javax.swing.JRadioButton();
        process = new javax.swing.JRadioButton();
        done = new javax.swing.JRadioButton();
        updateBG = new javax.swing.JPanel();
        updateButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(228, 228, 228));
        jPanel1.setLayout(null);

        changeStatusTitle.setFont(new java.awt.Font("Moon", 1, 24)); // NOI18N
        changeStatusTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changeStatusTitle.setText("Change Status");
        jPanel1.add(changeStatusTitle);
        changeStatusTitle.setBounds(0, 10, 370, 29);

        jPanel2.setBackground(new java.awt.Color(250, 250, 250));
        jPanel2.setLayout(null);

        waitForReceipt.setBackground(new java.awt.Color(250, 250, 250));
        changeGroup.add(waitForReceipt);
        waitForReceipt.setFont(new java.awt.Font("Cloud Light", 0, 14)); // NOI18N
        waitForReceipt.setText("Waiting for receipt");
        jPanel2.add(waitForReceipt);
        waitForReceipt.setBounds(190, 40, 150, 25);

        pendingPayment.setBackground(new java.awt.Color(250, 250, 250));
        changeGroup.add(pendingPayment);
        pendingPayment.setFont(new java.awt.Font("Cloud Light", 0, 14)); // NOI18N
        pendingPayment.setText("Pending Payment");
        jPanel2.add(pendingPayment);
        pendingPayment.setBounds(190, 10, 140, 25);

        pendingResponding.setBackground(new java.awt.Color(250, 250, 250));
        changeGroup.add(pendingResponding);
        pendingResponding.setFont(new java.awt.Font("Cloud Light", 0, 14)); // NOI18N
        pendingResponding.setText("Pending Responding");
        jPanel2.add(pendingResponding);
        pendingResponding.setBounds(10, 10, 170, 25);

        process.setBackground(new java.awt.Color(250, 250, 250));
        changeGroup.add(process);
        process.setFont(new java.awt.Font("Cloud Light", 0, 14)); // NOI18N
        process.setText("Process");
        jPanel2.add(process);
        process.setBounds(10, 40, 100, 25);

        done.setBackground(new java.awt.Color(250, 250, 250));
        changeGroup.add(done);
        done.setFont(new java.awt.Font("Cloud Light", 0, 14)); // NOI18N
        done.setText("Done");
        jPanel2.add(done);
        done.setBounds(10, 70, 81, 25);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 50, 350, 110);

        updateBG.setBackground(new java.awt.Color(153, 255, 153));
        updateBG.setLayout(null);

        updateButton.setFont(new java.awt.Font("Cloud Light", 0, 18)); // NOI18N
        updateButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateButton.setText("Update");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateButtonMouseExited(evt);
            }
        });
        updateBG.add(updateButton);
        updateButton.setBounds(0, 0, 350, 30);

        jPanel1.add(updateBG);
        updateBG.setBounds(10, 170, 350, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 430, 230);

        setSize(new java.awt.Dimension(377, 247));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void showTableRespond() {
        Connection con = null;
        try {
            con = ConnectionBuilder.getConnection();
            System.out.println("Conbuilder");
            RespondPrint respond = new RespondPrint();
            PreparedStatement pstm = con.prepareStatement("SELECT `status` FROM Orders WHERE orderID = " + respond.getOrderId());
            ResultSet rs = pstm.executeQuery();
            System.out.println(rs);
            if (rs.next()) {
                if (rs.getString("status").equals("Pending Responding")) {
                    pendingResponding.setSelected(true);
                    System.out.println("pending responding window activate function is working !");
                } else if (rs.getString("status").equals("Pending Payment")) {
                    pendingPayment.setSelected(true);
                    System.out.println("pending payment window activate function is working !");
                } else if (rs.getString("status").equals("Process")) {
                    process.setSelected(true);
                    System.out.println("process window activate function is working !");
                } else if (rs.getString("status").equals("Product can be picked")) {
                    waitForReceipt.setSelected(true);
                    System.out.println("wait for recipt window activate function is working !");
                } else if (rs.getString("status").equals("Done")) {
                    done.setSelected(true);
                    System.out.println("done window activate function is working !");
                }
            }
            pstm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(ChangeStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateStatus() {
        Connection con = null;
        try {
            con = ConnectionBuilder.getConnection();
            RespondPrint respond = new RespondPrint();
            PreparedStatement pstm = con.prepareStatement("UPDATE Orders SET `status` = ? WHERE orderID = " + respond.getOrderId());
            if (pendingResponding.isSelected()) {
                pstm.setString(1, pendingResponding.getText());
                System.out.println("pending responding update value function working !");
            } else if (pendingPayment.isSelected()) {
                pstm.setString(1, pendingPayment.getText());
                System.out.println("pending payment update value function working !");
            } else if (process.isSelected()) {
                pstm.setString(1, process.getText());
                System.out.println("process update value function working !");
            } else if (waitForReceipt.isSelected()) {
                pstm.setString(1, "Product can be picked");
                System.out.println("wait for receipt update value function working !");
            } else if (done.isSelected()) {
                pstm.setString(1, done.getText());
                System.out.println("done update value function working !");
            }
            pstm.executeUpdate();
            System.out.println("Executed update");
            this.setVisible(false);
            pstm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(ChangeStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        showTableRespond();
    }//GEN-LAST:event_formWindowActivated

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        updateStatus();
    }//GEN-LAST:event_updateButtonMouseClicked

    private void updateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseEntered
        updateBG.setBackground(new java.awt.Color(102, 255, 102));
    }//GEN-LAST:event_updateButtonMouseEntered

    private void updateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseExited
        updateBG.setBackground(new java.awt.Color(153, 255, 153));
    }//GEN-LAST:event_updateButtonMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangeStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangeStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangeStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangeStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangeStatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup changeGroup;
    private javax.swing.JLabel changeStatusTitle;
    private javax.swing.JRadioButton done;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton pendingPayment;
    private javax.swing.JRadioButton pendingResponding;
    private javax.swing.JRadioButton process;
    private javax.swing.JPanel updateBG;
    private javax.swing.JLabel updateButton;
    private javax.swing.JRadioButton waitForReceipt;
    // End of variables declaration//GEN-END:variables
}
